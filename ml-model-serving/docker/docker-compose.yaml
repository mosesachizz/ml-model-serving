version: '3.8'

services:
  ml-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/ml_serving
      - MODEL_STORAGE_TYPE=local
      - MODEL_STORAGE_PATH=/app/models
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - db
      - prometheus
    networks:
      - ml-network

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=ml_serving
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ml-network

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ml-network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana-dashboard.json:/var/lib/grafana/dashboards/ml_dashboard.json
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - ml-network

  training-pipeline:
    build:
      context: .
      dockerfile: docker/Dockerfile.training
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/ml_serving
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - db
    networks:
      - ml-network
    command: ["python", "-m", "training_pipeline.pipeline"]

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  ml-network:
    driver: bridge